{"title":"手写一个 React 图片预览组件","date":"2023-06-11","content":"\n            <p>\n                前几天打算给博客添加一个图片预览的效果，可在网上找了半天也没找到合适的库，于是自己干脆自己手写了个。\n            </p>\n        \n            <p>\n                最终实现效果如下：\n            </p>\n        \n            <figure class=\"notion-image\">\n                <img src=\"https://s2.loli.net/2023/11/17/hFzHOiJ4TZ2Nlts.gif\" />\n                \n            </figure>\n        \n            <h2 class=\"notion-heading_2 notion-color-default\">\n                实现原理\n            </h2>\n        \n            <p>\n                当鼠标点击图片时生成一个半透明遮罩，并添加一个与点击图片位置大小都相同的图片，之后通过 CSS 实现图片的放大和居中，当再次点击时，通过删除样式实现图片的返回。\n            </p>\n        \n            <h2 class=\"notion-heading_2 notion-color-default\">\n                具体操作\n            </h2>\n        \n            <h3 class=\"notion-heading_3 notion-color-default\">\n                添加遮罩和图片\n            </h3>\n        \n            <p>\n                此处需要用到 ReactDom 的 <code class=\"notion-text-code\">createPortal()</code> 方法，它可以将元素渲染到网页中的指定位置。因为要考虑到图片的返回，所以图片的位置不能用 <code class=\"notion-text-code\">getBoundingClientRect()</code> 提供的相对于视图窗口的坐标，而是要用到 <code class=\"notion-text-code\">offsetTop</code> 和 <code class=\"notion-text-code\">offsetLeft</code> 提供的相对于 offsetParent 的坐标，所以需要将遮罩和图片渲染到 body 元素中，并且二者需要为同一级。具体实现代码如下：\n            </p>\n        \n            <div class=\"notion-code\">\n                <pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">import</span> { useRef, useState } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { createPortal } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react-dom&#x27;</span>;\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Mask</span>(<span class=\"hljs-params\">{ props, setStatus, imgRef }</span>) {\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">close</span> = (<span class=\"hljs-params\"></span>) =&gt; {\n        <span class=\"hljs-title function_\">setStatus</span>(<span class=\"hljs-literal\">false</span>);\n    };\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">createPortal</span>(\n        <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{close}</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;cursor-zoom-out&quot;</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;fixed bottom-0 left-0 right-0 top-0 bg-black/75&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span>\n                {<span class=\"hljs-attr\">...props</span>}\n                <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;absolute&quot;</span>\n                <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{{</span>\n                    <span class=\"hljs-attr\">top:</span> <span class=\"hljs-attr\">imgRef.current.offsetTop</span>,\n                    <span class=\"hljs-attr\">left:</span> <span class=\"hljs-attr\">imgRef.current.offsetLeft</span>,\n                    <span class=\"hljs-attr\">width:</span> <span class=\"hljs-attr\">imgRef.current.offsetWidth</span>,\n                    <span class=\"hljs-attr\">height:</span> <span class=\"hljs-attr\">imgRef.current.offsetHeight</span>,\n                }}\n            /&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>,\n        <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-property\">body</span>\n    );\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Img</span>(<span class=\"hljs-params\">props</span>) {\n    <span class=\"hljs-keyword\">const</span> [status, setStatus] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-literal\">false</span>);\n    <span class=\"hljs-keyword\">const</span> imgRef = <span class=\"hljs-title function_\">useRef</span>(<span class=\"hljs-literal\">null</span>);\n    <span class=\"hljs-keyword\">return</span> (\n        <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span>\n                {<span class=\"hljs-attr\">...props</span>}\n                <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">{imgRef}</span>\n                <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">{</span>`<span class=\"hljs-attr\">cursor-zoom-in</span> ${<span class=\"hljs-attr\">status</span> ? &#x27;<span class=\"hljs-attr\">invisible</span>&#x27; <span class=\"hljs-attr\">:</span> &#x27;&#x27;}`}\n                <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{()</span> =&gt;</span> {\n                    setStatus(true);\n                }}\n                loading=&quot;lazy&quot;\n            /&gt;\n            {status &amp;&amp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Mask</span> <span class=\"hljs-attr\">props</span>=<span class=\"hljs-string\">{props}</span> <span class=\"hljs-attr\">setStatus</span>=<span class=\"hljs-string\">{setStatus}</span> <span class=\"hljs-attr\">imgRef</span>=<span class=\"hljs-string\">{imgRef}</span> /&gt;</span>}\n        <span class=\"hljs-tag\">&lt;/&gt;</span></span>\n    );\n}</code></pre>\n                \n            </div>\n        \n            <p>\n                此时点击图片便会在 body 下生成一个遮罩和处在相同位置的图片，再次点击时则会关闭。\n            </p>\n        \n            <figure class=\"notion-image\">\n                <img src=\"https://img12.360buyimg.com/ddimg/jfs/t1/237318/26/3241/72931/65574e51Fcdaac619/c3154d6482ca55e1.jpg\" />\n                \n            </figure>\n        \n            <h3 class=\"notion-heading_3 notion-color-default\">\n                添加动画效果\n            </h3>\n        \n            <p>\n                动画效果主要由 CSS 中的 <code class=\"notion-text-code\">transition</code> 和 <code class=\"notion-text-code\">transform</code> 实现，而 <code class=\"notion-text-code\">transform</code> 主要用到了其中的 <code class=\"notion-text-code\">scale()</code> 和 <code class=\"notion-text-code\">translate</code> 函数。\n            </p>\n        \n            <p>\n                <code class=\"notion-text-code\">scale()</code> 的数值为图片缩放的倍数，我们需要将图片尽量缩放到原先尺寸，但不能超出屏幕。所以要分别求出图片宽度和高度的最大缩放倍数，之后对比取最小值，但在计算图片目标尺寸时，需要与屏幕尺寸对比取最小值。\n            </p>\n        \n            <div class=\"notion-code\">\n                <pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">const</span> scaleX = <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">min</span>(naturalWidth, viewportWidth) / width;\n<span class=\"hljs-keyword\">const</span> scaleY = <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">min</span>(naturalHeight, viewportHeight) / height;\n<span class=\"hljs-keyword\">const</span> scale = <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">min</span>(scaleX, scaleY);</code></pre>\n                \n            </div>\n        \n            <p>\n                <code class=\"notion-text-code\">translate()</code> 的数值为图片在 X 和 Y 轴上的偏移量，我们需要将图片偏移到屏幕中心，所以要求出图片中心点距屏幕中心点的横纵距离\n            </p>\n        \n            <figure class=\"notion-image\">\n                <img src=\"https://img14.360buyimg.com/ddimg/jfs/t1/183416/29/41295/11118/65574e68Ff5972ec0/1a000fe297744670.jpg\" />\n                \n            </figure>\n        \n            <div class=\"notion-code\">\n                <pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">const</span> translateX = ((viewportWidth - width) / <span class=\"hljs-number\">2</span> - left) / scale;\n<span class=\"hljs-keyword\">const</span> translateY = ((viewportHeight - height) / <span class=\"hljs-number\">2</span> - top) / scale;</code></pre>\n                \n            </div>\n        \n            <p>\n                具体计算函数如下\n            </p>\n        \n            <div class=\"notion-code\">\n                <pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">calcFitScale</span> = imgRef =&gt; {\n    <span class=\"hljs-keyword\">const</span> { top, left, width, height } = imgRef.<span class=\"hljs-property\">current</span>.<span class=\"hljs-title function_\">getBoundingClientRect</span>();\n    <span class=\"hljs-keyword\">const</span> { naturalWidth, naturalHeight } = imgRef.<span class=\"hljs-property\">current</span>;\n    <span class=\"hljs-keyword\">const</span> viewportWidth = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-property\">documentElement</span>.<span class=\"hljs-property\">clientWidth</span>;\n    <span class=\"hljs-keyword\">const</span> viewportHeight = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-property\">documentElement</span>.<span class=\"hljs-property\">clientHeight</span>;\n    <span class=\"hljs-keyword\">const</span> scaleX = <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">min</span>(<span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">max</span>(width, naturalWidth), viewportWidth) / width;\n    <span class=\"hljs-keyword\">const</span> scaleY = <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">min</span>(<span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">max</span>(height, naturalHeight), viewportHeight) / height;\n    <span class=\"hljs-keyword\">const</span> scale = <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">min</span>(scaleX, scaleY);\n    <span class=\"hljs-keyword\">const</span> translateX = ((viewportWidth - width) / <span class=\"hljs-number\">2</span> - left) / scale;\n    <span class=\"hljs-keyword\">const</span> translateY = ((viewportHeight - height) / <span class=\"hljs-number\">2</span> - top) / scale;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">`scale(<span class=\"hljs-subst\">${scale}</span>) translate(<span class=\"hljs-subst\">${translateX}</span>px, <span class=\"hljs-subst\">${translateY}</span>px)`</span>;\n};</code></pre>\n                \n            </div>\n        \n            <p>\n                这里讲一下为什么要在生成偏移量的时候除以缩放倍数，因为 CSS 中 <code class=\"notion-text-code\">transform</code> 的执行是有先后顺序的，图片进行 <code class=\"notion-text-code\">scale()</code> 缩放后其 <code class=\"notion-text-code\">translate()</code> 的偏移距离也会发生变化，所以需要在计算时提前考虑。倘若要先进行偏移后进行缩放，则可以不考虑此因素。\n            </p>\n        \n            <div class=\"notion-code\">\n                <pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">const</span> translateX = (viewportWidth - width) / <span class=\"hljs-number\">2</span> - left;\n<span class=\"hljs-keyword\">const</span> translateY = (viewportHeight - height) / <span class=\"hljs-number\">2</span> - top;\n<span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">`translate(<span class=\"hljs-subst\">${translateX}</span>px, <span class=\"hljs-subst\">${translateY}</span>px) scale(<span class=\"hljs-subst\">${scale}</span>)`</span>;</code></pre>\n                \n            </div>\n        \n            <h3 class=\"notion-heading_3 notion-color-default\">\n                最终代码\n            </h3>\n        \n            <p>\n                最后加上一点滚动监听，屏幕监听，遮罩透明度变化即可得到最终函数\n            </p>\n        \n            <div class=\"notion-code\">\n                <pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">import</span> { useEffect, useRef, useState } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { createPortal } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react-dom&#x27;</span>;\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Mask</span>(<span class=\"hljs-params\">{ props, setStatus, imgRef }</span>) {\n    <span class=\"hljs-keyword\">const</span> [transform, setTransform] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-string\">&#x27;&#x27;</span>);\n    <span class=\"hljs-keyword\">const</span> [opacity, setOpacity] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-number\">0.7</span>);\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">close</span> = (<span class=\"hljs-params\"></span>) =&gt; {\n        <span class=\"hljs-title function_\">setOpacity</span>(<span class=\"hljs-number\">0</span>);\n        <span class=\"hljs-title function_\">setTransform</span>(<span class=\"hljs-string\">&#x27;&#x27;</span>);\n        <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =&gt;</span> {\n            <span class=\"hljs-title function_\">setStatus</span>(<span class=\"hljs-literal\">false</span>);\n        }, <span class=\"hljs-number\">300</span>);\n    };\n    <span class=\"hljs-title function_\">useEffect</span>(<span class=\"hljs-function\">() =&gt;</span> {\n        <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">handleResize</span> = (<span class=\"hljs-params\"></span>) =&gt; {\n            <span class=\"hljs-title function_\">setTransform</span>(<span class=\"hljs-title function_\">calcFitScale</span>(imgRef));\n        };\n        <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&#x27;resize&#x27;</span>, handleResize);\n        <span class=\"hljs-title function_\">handleResize</span>();\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-title function_\">removeEventListener</span>(<span class=\"hljs-string\">&#x27;resize&#x27;</span>, handleResize);\n    }, []);\n    <span class=\"hljs-title function_\">useEffect</span>(<span class=\"hljs-function\">() =&gt;</span> {\n        <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&#x27;scroll&#x27;</span>, close);\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-title function_\">removeEventListener</span>(<span class=\"hljs-string\">&#x27;scroll&#x27;</span>, close);\n    }, []);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">createPortal</span>(\n        <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{close}</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;cursor-zoom-out&quot;</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>\n                <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;fixed bottom-0 left-0 right-0 top-0 bg-black&quot;</span>\n                <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{{</span>\n                    <span class=\"hljs-attr\">opacity</span>,\n                    <span class=\"hljs-attr\">transition:</span> &#x27;<span class=\"hljs-attr\">opacity</span> <span class=\"hljs-attr\">300ms</span> <span class=\"hljs-attr\">cubic-bezier</span>(<span class=\"hljs-attr\">0.4</span>, <span class=\"hljs-attr\">0</span>, <span class=\"hljs-attr\">0.2</span>, <span class=\"hljs-attr\">1</span>)&#x27;,\n                }}\n            &gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span>\n                {<span class=\"hljs-attr\">...props</span>}\n                <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;absolute&quot;</span>\n                <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{{</span>\n                    <span class=\"hljs-attr\">transition:</span> &#x27;<span class=\"hljs-attr\">transform</span> <span class=\"hljs-attr\">300ms</span> <span class=\"hljs-attr\">cubic-bezier</span>(<span class=\"hljs-attr\">.2</span>, <span class=\"hljs-attr\">0</span>, <span class=\"hljs-attr\">.2</span>, <span class=\"hljs-attr\">1</span>)&#x27;,\n                    <span class=\"hljs-attr\">top:</span> <span class=\"hljs-attr\">imgRef.current.offsetTop</span>,\n                    <span class=\"hljs-attr\">left:</span> <span class=\"hljs-attr\">imgRef.current.offsetLeft</span>,\n                    <span class=\"hljs-attr\">width:</span> <span class=\"hljs-attr\">imgRef.current.offsetWidth</span>,\n                    <span class=\"hljs-attr\">height:</span> <span class=\"hljs-attr\">imgRef.current.offsetHeight</span>,\n                    <span class=\"hljs-attr\">transform:</span> <span class=\"hljs-attr\">transform</span>,\n                }}\n            /&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>,\n        <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-property\">body</span>\n    );\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Img</span>(<span class=\"hljs-params\">props</span>) {\n    <span class=\"hljs-keyword\">const</span> [status, setStatus] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-literal\">false</span>);\n    <span class=\"hljs-keyword\">const</span> imgRef = <span class=\"hljs-title function_\">useRef</span>(<span class=\"hljs-literal\">null</span>);\n    <span class=\"hljs-keyword\">return</span> (\n        <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span>\n                {<span class=\"hljs-attr\">...props</span>}\n                <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">{imgRef}</span>\n                <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">{</span>`<span class=\"hljs-attr\">cursor-zoom-in</span> ${<span class=\"hljs-attr\">status</span> ? &#x27;<span class=\"hljs-attr\">invisible</span>&#x27; <span class=\"hljs-attr\">:</span> &#x27;&#x27;}`}\n                <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{()</span> =&gt;</span> {\n                    setStatus(true);\n                }}\n                loading=&quot;lazy&quot;\n            /&gt;\n            {status &amp;&amp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Mask</span> <span class=\"hljs-attr\">props</span>=<span class=\"hljs-string\">{props}</span> <span class=\"hljs-attr\">setStatus</span>=<span class=\"hljs-string\">{setStatus}</span> <span class=\"hljs-attr\">imgRef</span>=<span class=\"hljs-string\">{imgRef}</span> /&gt;</span>}\n        <span class=\"hljs-tag\">&lt;/&gt;</span></span>\n    );\n}\n\n<span class=\"hljs-comment\">/**\n * 计算图片缩放比例\n */</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">calcFitScale</span> = imgRef =&gt; {\n    <span class=\"hljs-keyword\">const</span> margin = <span class=\"hljs-number\">5</span>;\n    <span class=\"hljs-keyword\">const</span> { top, left, width, height } = imgRef.<span class=\"hljs-property\">current</span>.<span class=\"hljs-title function_\">getBoundingClientRect</span>();\n    <span class=\"hljs-keyword\">const</span> { naturalWidth, naturalHeight } = imgRef.<span class=\"hljs-property\">current</span>;\n    <span class=\"hljs-keyword\">const</span> viewportWidth = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-property\">documentElement</span>.<span class=\"hljs-property\">clientWidth</span>;\n    <span class=\"hljs-keyword\">const</span> viewportHeight = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-property\">documentElement</span>.<span class=\"hljs-property\">clientHeight</span>;\n    <span class=\"hljs-keyword\">const</span> scaleX = <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">min</span>(<span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">max</span>(width, naturalWidth), viewportWidth) / width;\n    <span class=\"hljs-keyword\">const</span> scaleY = <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">min</span>(<span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">max</span>(height, naturalHeight), viewportHeight) / height;\n    <span class=\"hljs-keyword\">const</span> scale = <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">min</span>(scaleX, scaleY) - margin / <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">min</span>(width, height) + <span class=\"hljs-number\">0.002</span>;\n    <span class=\"hljs-keyword\">const</span> translateX = ((viewportWidth - width) / <span class=\"hljs-number\">2</span> - left) / scale;\n    <span class=\"hljs-keyword\">const</span> translateY = ((viewportHeight - height) / <span class=\"hljs-number\">2</span> - top) / scale;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">`scale(<span class=\"hljs-subst\">${scale}</span>) translate3d(<span class=\"hljs-subst\">${translateX}</span>px, <span class=\"hljs-subst\">${translateY}</span>px, 0)`</span>;\n};</code></pre>\n                \n            </div>\n        \n            <p>\n                <code class=\"notion-text-code\">transform</code> 的初始值并没有直接从 <code class=\"notion-text-code\">calcFitScale()</code> 中获取，而是通过在 <code class=\"notion-text-code\">useEffect()</code> 进行赋值，因为如果一开始就给图片定义了 <code class=\"notion-text-code\">transform</code> ，则不会产生动画效果。\n            </p>\n        \n            <h2 class=\"notion-heading_2 notion-color-default\">\n                参考链接\n            </h2>\n        \n            <p>\n                <a href=\"https://stackoverflow.com/questions/65159464/\" class=\"notion-text-href\">Understanding translate after scale in CSS transforms</a>\n            </p>\n        \n            <p>\n                <a href=\"https://stackoverflow.com/questions/53671968/\" class=\"notion-text-href\">Why does order of transforms matter? rotate/scale doesn’t give the same result as scale/rotate</a>\n            </p>\n        \n            <p>\n                \n            </p>\n        ","tags":["React","前端"],"slug":"b4f558c5","wordcount":625,"excerpt":"前几天打算给博客添加一个图片预览的效果，可在网上找了半天也没找到合适的库，于是自己干脆自己手写了个。,最终实现效果如下：,当鼠标点击图片时生成一个半透明遮罩，并添加一个与点击图片位置大小都相同的图片，之后通过CSS实现图片的放大和居中..."}