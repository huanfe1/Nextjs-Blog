{"title":"将 Contentlayer 作为 Next.js 数据源","date":"2023-06-03","content":"\n            <p>\n                Hexo 是我博客创立之初时便使用的框架，在博客经过几次框架更换后，整体框架已经由 Next.js 负责，Hexo 仅作为后台数据源使用，之所以还在使用是因为一直没有找到合适的替代品。\n            </p>\n        \n            <p>\n                Hexo 作为一个博客框架，让许多人也包括我成功搭建出了属于自己人生中的第一个博客，其提供了全方位的博客处理。但是当其只作为数据处理工具时，其提供的全方位的支持不免便显得有些沉重了。并且让一个博客框架只担任数据处理的功能，显得有点杀鸡用宰牛刀。\n            </p>\n        \n            <p>\n                于是，在一番对比下来，我选择了用 <a href=\"https://www.contentlayer.dev/\" class=\"notion-text-href\">Contentlayer</a> 代替它的位置\n            </p>\n        \n            <h2 class=\"notion-heading_2 notion-color-default\">\n                何为 Contentlayer\n            </h2>\n        \n            <p>\n                官网介绍到 Contentlayer 是一个 <b class=\"notion-text-bold\">Content SDK</b> ，用于验证内容并将其转化为类型安全的 JSON 数据。\n            </p>\n        \n            <p>\n                其创立于 2022 年，目前还处于测试阶段，仅支持处理本地 <b class=\"notion-text-bold\">MD/MDX</b> 文件，且仅支持对接 Next.js，但据文档所写已经对 Next.js 完全支持，并且还很自信写出了想要成为管理 Next.js 项目内容的首选工具。\n            </p>\n        \n            <figure class=\"notion-image\">\n                <img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/237043/20/3286/13645/655750dfF125bed87/49b8a24d82b531b5.jpg\" />\n                \n            </figure>\n        \n            <p>\n                目前为止项目共发布了两篇文章介绍 Contentlayer 的优点。\n            </p>\n        \n            <p>\n                <a href=\"https://www.contentlayer.dev/blog/beta\" class=\"notion-text-href\">Introducing Contentlayer (Beta): Content Made Easy for Developers</a>\n            </p>\n        \n            <p>\n                <a href=\"https://www.contentlayer.dev/blog/working-with-content-is-hard-for-developers\" class=\"notion-text-href\">Why Working with Content is Hard for Developers</a>\n            </p>\n        \n            <p>\n                这里结合自己的使用体验说一下我感觉相对于 Hexo 来说的优点：\n            </p>\n        <ul class=\"notion-bulleted_list\">\n            <li class=\"notion-bulleted_list_item notion-color-default\">\n                支持 TypeScript ，并能根据配置文件自动生成相应的类型文件\n            </li>\n        \n            <li class=\"notion-bulleted_list_item notion-color-default\">\n                更快的处理速度，采取了增量更新和并行构建，并加入了缓存系统\n            </li>\n        \n            <li class=\"notion-bulleted_list_item notion-color-default\">\n                可以监控文件修改，并实时刷新页面内容\n            </li>\n        \n            <li class=\"notion-bulleted_list_item notion-color-default\">\n                重量轻，所需编写代码较少，上手容易\n            </li>\n        </ul>\n            <p>\n                首先需要在本地配置好基本的类型定义以及项目目录。\n            </p>\n        \n            <div class=\"notion-code\">\n                <pre><code class=\"language-typescript\"><span class=\"hljs-keyword\">import</span> { defineDocumentType, makeSource } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;contentlayer/source-files&#x27;</span>;\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">Post</span> = <span class=\"hljs-title function_\">defineDocumentType</span>(<span class=\"hljs-function\">() =&gt;</span> ({\n    <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;Post&#x27;</span>,\n    <span class=\"hljs-comment\">// 获取文章目录下所有的 mdx 文件</span>\n    <span class=\"hljs-attr\">filePathPattern</span>: <span class=\"hljs-string\">`**/*.mdx`</span>,\n    <span class=\"hljs-comment\">// 启用 mdx 解析</span>\n    <span class=\"hljs-attr\">contentType</span>: <span class=\"hljs-string\">&#x27;mdx&#x27;</span>,\n    <span class=\"hljs-comment\">// 定义文章的 frontmatter 类型</span>\n    <span class=\"hljs-attr\">fields</span>: {\n        <span class=\"hljs-attr\">title</span>: {\n            <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&#x27;string&#x27;</span>,\n            <span class=\"hljs-attr\">description</span>: <span class=\"hljs-string\">&#x27;The title of the post&#x27;</span>,\n            <span class=\"hljs-attr\">required</span>: <span class=\"hljs-literal\">true</span>,\n        },\n        <span class=\"hljs-attr\">date</span>: {\n            <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&#x27;date&#x27;</span>,\n            <span class=\"hljs-attr\">description</span>: <span class=\"hljs-string\">&#x27;The date of the post&#x27;</span>,\n            <span class=\"hljs-attr\">required</span>: <span class=\"hljs-literal\">true</span>,\n        },\n    },\n    <span class=\"hljs-comment\">// 解析文章后，数据后续处理</span>\n    <span class=\"hljs-attr\">computedFields</span>: {\n        <span class=\"hljs-attr\">url</span>: { <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&#x27;string&#x27;</span>, <span class=\"hljs-attr\">resolve</span>: <span class=\"hljs-function\"><span class=\"hljs-params\">doc</span> =&gt;</span> <span class=\"hljs-string\">`/posts/<span class=\"hljs-subst\">${doc._raw.flattenedPath}</span>`</span> },\n    },\n}));\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title function_\">makeSource</span>({\n    <span class=\"hljs-comment\">// 定义文章目录地址</span>\n    <span class=\"hljs-attr\">contentDirPath</span>: <span class=\"hljs-string\">&#x27;posts&#x27;</span>,\n    <span class=\"hljs-attr\">documentTypes</span>: [<span class=\"hljs-title class_\">Post</span>],\n});<span class=\"hljs-attr\">umentTypes</span>: [<span class=\"hljs-title class_\">Post</span>],\n});</code></pre>\n                \n            </div>\n        \n            <p>\n                紧接着 Contentlayer 会把项目目录下的 Markdown 文件转化为 JSON 文件并保存到项目根目录下的 <code class=\"notion-text-code\">.contentlayer</code> 文件夹内。\n            </p>\n        \n            <p>\n                在自动生成的 <code class=\"notion-text-code\">index.mjs</code> 文件内通过 <code class=\"notion-text-code\">import</code> 的方式导入这些 <code class=\"notion-text-code\">JSON</code> 文件并将数据合并导出以便外部引用。\n            </p>\n        \n            <div class=\"notion-code\">\n                <pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">import</span> changeMeMdx <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./change-me.mdx.json&#x27;</span> assert { <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&#x27;json&#x27;</span> };\n<span class=\"hljs-keyword\">import</span> clickMeMdx <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./click-me.mdx.json&#x27;</span> assert { <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&#x27;json&#x27;</span> };\n<span class=\"hljs-keyword\">import</span> whatIsContentlayerMdx <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./what-is-contentlayer.mdx.json&#x27;</span> assert { <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&#x27;json&#x27;</span> };\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> allPosts = [changeMeMdx, clickMeMdx, whatIsContentlayerMdx];</code></pre>\n                \n            </div>\n        \n            <p>\n                之后便可在文件内导入。\n            </p>\n        \n            <div class=\"notion-code\">\n                <pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">import</span> { allPosts } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;contentlayer/generated&#x27;</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">getStaticProps</span>(<span class=\"hljs-params\">{ params }</span>) {\n    <span class=\"hljs-keyword\">return</span> { <span class=\"hljs-attr\">props</span>: { <span class=\"hljs-attr\">posts</span>: allPosts.<span class=\"hljs-title function_\">find</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">post</span> =&gt;</span> post.<span class=\"hljs-property\">slug</span> === params.<span class=\"hljs-property\">slug</span>) } };\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">getStaticPaths</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">return</span> {\n        <span class=\"hljs-attr\">paths</span>: allPosts.<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">post</span> =&gt;</span> ({ <span class=\"hljs-attr\">params</span>: { <span class=\"hljs-attr\">slug</span>: post.<span class=\"hljs-property\">slug</span> } })),\n        <span class=\"hljs-attr\">fallback</span>: <span class=\"hljs-literal\">false</span>,\n    };\n}</code></pre>\n                \n            </div>\n        \n            <p>\n                就是这么简单，只需编写一个配置文件，之后便可在代码中直接进行导入。\n            </p>\n        \n            <h2 class=\"notion-heading_2 notion-color-default\">\n                结语\n            </h2>\n        \n            <p>\n                在搭建 Contentlayer 时遇到了一个中文语言的 BUG（年轻人终究还是年轻人），在提交 <a href=\"https://github.com/contentlayerdev/contentlayer/pull/470\" class=\"notion-text-href\">PR</a> 并与开发者一番交流后已成功在新版本中修复。\n            </p>\n        \n            <figure class=\"notion-image\">\n                <img src=\"https://img11.360buyimg.com/ddimg/jfs/t1/222086/2/34131/54836/655751ebFcadf78b2/eb49c384b89aed9b.jpg\" />\n                \n            </figure>\n        \n            <p>\n                经过此次更新，博客的文章处理和构建速度以及使用体验都得到了较大提升。在博客框架经历了 Hexo、Astro、Nuxt.js、Next.js 的迭代后，发现还是 Next.js 更合自己胃口，其在各个方面的使用体验都感到很满意，以后可能会在很长一段时间内继续使用，不再变更。\n            </p>\n        \n            <p>\n                \n            </p>\n        ","tags":["Nexj.js","React","前端"],"slug":"7f9134c6","wordcount":641,"excerpt":"Hexo是我博客创立之初时便使用的框架，在博客经过几次框架更换后，整体框架已经由Next.js负责，Hexo仅作为后台数据源使用，之所以还在使用是因为一直没有找到合适的替代品。,Hexo作为一个博客框架，让许多人也包括我成功搭建出了属..."}